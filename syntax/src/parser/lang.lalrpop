use std::borrow::Cow;
use either::Either;
use crate::lexer::{Loc, Error, Lexer, Token, Symbol, Keyword, Literal, Integer};
use super::ast::*;

grammar<'input>;

extern {
    type Location = Loc;
    type Error = Error;

    enum Token<'input> {
        S_HASHTAG => Token::Symbol(Symbol::Hashtag),
        S_PATH_SEP => Token::Symbol(Symbol::PathSep),
        S_DOLLAR => Token::Symbol(Symbol::Dollar),
        S_AT => Token::Symbol(Symbol::At),
        S_SQUARE_OPEN => Token::Symbol(Symbol::SquareOpen),
        S_SQUARE_CLOSE => Token::Symbol(Symbol::SquareClose),
        S_PLUS => Token::Symbol(Symbol::Plus),
        S_PERCENT => Token::Symbol(Symbol::Percent),
        S_EXCLAMATION => Token::Symbol(Symbol::Exclamation),
        S_TWO_DOTS => Token::Symbol(Symbol::TwoDots),
        S_BRACKET_OPEN => Token::Symbol(Symbol::BracketOpen),
        S_BRACKET_CLOSE => Token::Symbol(Symbol::BracketClose),
        S_ARROW => Token::Symbol(Symbol::Arrow),
        S_LINE => Token::Symbol(Symbol::Line),
        S_COMMA => Token::Symbol(Symbol::Comma),
        S_DOT => Token::Symbol(Symbol::Dot),
        S_CURLY_OPEN => Token::Symbol(Symbol::CurlyOpen),
        S_CURLY_CLOSE => Token::Symbol(Symbol::CurlyClose),
        S_EQUAL => Token::Symbol(Symbol::Equal),
        S_DOT_COMMA => Token::Symbol(Symbol::DotComma),
        S_SLASH => Token::Symbol(Symbol::Slash),
        S_DIAMOND => Token::Symbol(Symbol::Diamond),
        S_ANGLED_OPEN => Token::Symbol(Symbol::AngledOpen),
        S_ANGLED_CLOSE => Token::Symbol(Symbol::AngledClose),

        KW_STR => Token::Keyword(Keyword::Str),
        KW_CHAR => Token::Keyword(Keyword::Char),
        KW_BOOL => Token::Keyword(Keyword::Bool),
        KW_VOID => Token::Keyword(Keyword::Void),
        KW_TRUE => Token::Keyword(Keyword::True),
        KW_FALSE => Token::Keyword(Keyword::False),
        KW_IF => Token::Keyword(Keyword::If),
        KW_UNLESS => Token::Keyword(Keyword::Unless),
        KW_WHILE => Token::Keyword(Keyword::While),
        KW_UNTIL => Token::Keyword(Keyword::Until),
        KW_SEL => Token::Keyword(Keyword::Sel),
        KW_OR => Token::Keyword(Keyword::Or),
        KW_ELSE => Token::Keyword(Keyword::Else),
        KW_OF => Token::Keyword(Keyword::Of),
        KW_LOOP => Token::Keyword(Keyword::Loop),
        KW_DO => Token::Keyword(Keyword::Do),
        KW_OVER => Token::Keyword(Keyword::Over),
        KW_WITH => Token::Keyword(Keyword::With),
        KW_HANDLE => Token::Keyword(Keyword::Handle),
        KW_UNHANDLE => Token::Keyword(Keyword::Unhandle),
        KW_LET => Token::Keyword(Keyword::Let),
        KW_ESCAPE => Token::Keyword(Keyword::Escape),
        KW_REPEAT => Token::Keyword(Keyword::Repeat),
        KW_RETURN => Token::Keyword(Keyword::Return),
        KW_THROW => Token::Keyword(Keyword::Throw),
        KW_VM_DEBUG => Token::Keyword(Keyword::VmDebug),
        KW_PACK => Token::Keyword(Keyword::Pack),
        KW_LOAD_ITEM => Token::Keyword(Keyword::LoadItem),
        KW_LOAD_FUNC => Token::Keyword(Keyword::LoadFunc),
        KW_LOAD_IMPL => Token::Keyword(Keyword::LoadImpl),
        KW_LOAD_SYS_ITEM => Token::Keyword(Keyword::LoadSysItem),
        KW_ACCESS => Token::Keyword(Keyword::Access),
        KW_CALL => Token::Keyword(Keyword::Call),
        KW_SYS_CALL => Token::Keyword(Keyword::SysCall),
        KW_SWAP => Token::Keyword(Keyword::Swap),
        KW_PULL => Token::Keyword(Keyword::Pull),
        KW_POP => Token::Keyword(Keyword::Pop),
        KW_COPY => Token::Keyword(Keyword::Copy),
        KW_JUMP => Token::Keyword(Keyword::Jump),
        KW_ASM => Token::Keyword(Keyword::Asm),
        KW_INCLUDE => Token::Keyword(Keyword::Include),
        KW_MODULE => Token::Keyword(Keyword::Module),
        KW_CONST => Token::Keyword(Keyword::Const),
        KW_DATA => Token::Keyword(Keyword::Data),
        KW_PROTO => Token::Keyword(Keyword::Proto),
        KW_IMPL => Token::Keyword(Keyword::Impl),
        KW_FNC => Token::Keyword(Keyword::Fnc),
        KW_I8 => Token::Keyword(Keyword::I8),
        KW_I16 => Token::Keyword(Keyword::I16),
        KW_I32 => Token::Keyword(Keyword::I32),
        KW_I64 => Token::Keyword(Keyword::I64),
        KW_I128 => Token::Keyword(Keyword::I128),
        KW_U8 => Token::Keyword(Keyword::U8),
        KW_U16 => Token::Keyword(Keyword::U16),
        KW_U32 => Token::Keyword(Keyword::U32),
        KW_U64 => Token::Keyword(Keyword::U64),
        KW_U128 => Token::Keyword(Keyword::U128),

        IDENT => Token::Identifier(<&'input str>),

        L_STRING => Token::Literal(Literal::String(<Cow<'input, str>>)),
        L_CHAR => Token::Literal(Literal::Char(<char>)),
        L_INTEGER => Token::Literal(Literal::Integer(<Integer>)),
        L_FLOAT => Token::Literal(Literal::Float(<f64>)),
    }
}

#[inline]
Sep<T, S>: Vec<T> = {
    ((<T> S)* T)? => match <> {
        None => vec![],
        Some((mut v, e)) => {
            v.push(e);
            v
        }
    }
};

#[inline]
SepReq<T, S>: Vec<T> = {
    <mut v:(<T> S)*> <e:T> => {
        v.push(e);
        v
    }
}

#[inline]
SepSep<T, S>: Vec<T> = <Sep<T, S>> S?;

#[inline]
OptDefault<T>: T = T? => <>.unwrap_or(Default::default());

#[inline]
SepSepReq<T, S>: Vec<T> = <SepReq<T, S>> S?;

#[inline]
Comma<T>: Vec<T> = SepSep<T, S_COMMA>;

#[inline]
Either<L, R>: Either<L, R> = {
    L => Either::Left(<>),
    R => Either::Right(<>),
};

// ------------------------------------------------------------------------------------------------

ItemRoot: ItemRoot<'input> = {
    // #::
    S_HASHTAG S_PATH_SEP => ItemRoot::CrateRoot,
    // #lib::
    S_HASHTAG <lib:IDENT> S_PATH_SEP => ItemRoot::LibRoot {<>},
    // $::
    <updepth:S_DOLLAR*> S_PATH_SEP => ItemRoot::ModRoot { updepth: updepth.len() },
};

// #::children::child_a
Item: Item<'input> = <root:ItemRoot?> <path:SepReq<IDENT, S_PATH_SEP>> => Item {<>};

Generics: Vec<Type<'input>> = S_ANGLED_OPEN <Comma<Type>> S_ANGLED_CLOSE;

ProtocolType: ProtocolType<'input> = <base:Item> <generics:OptDefault<Generics>> => ProtocolType {<>};

#[inline]
IntegerType: PrimitiveType = {
    KW_I8 => PrimitiveType::Integer { signed: true, size: IntegerTypeSize::Byte },
    KW_I16 => PrimitiveType::Integer { signed: true, size: IntegerTypeSize::Word },
    KW_I32 => PrimitiveType::Integer { signed: true, size: IntegerTypeSize::DWord },
    KW_I64 => PrimitiveType::Integer { signed: true, size: IntegerTypeSize::QWord },
    KW_I128 => PrimitiveType::Integer { signed: true, size: IntegerTypeSize::OWord },
    KW_U8 => PrimitiveType::Integer { signed: false, size: IntegerTypeSize::Byte },
    KW_U16 => PrimitiveType::Integer { signed: false, size: IntegerTypeSize::Word },
    KW_U32 => PrimitiveType::Integer { signed: false, size: IntegerTypeSize::DWord },
    KW_U64 => PrimitiveType::Integer { signed: false, size: IntegerTypeSize::QWord },
    KW_U128 => PrimitiveType::Integer { signed: false, size: IntegerTypeSize::OWord },
};

PrimitiveType: PrimitiveType = {
    KW_STR => PrimitiveType::String,
    KW_CHAR => PrimitiveType::Char,
    KW_BOOL => PrimitiveType::Bool,
    KW_VOID => PrimitiveType::Void,
    IntegerType,
};

Type: Type<'input> = {
    // @[Foo + Bar]
    S_AT S_SQUARE_OPEN <SepReq<ProtocolType, S_PLUS>> S_SQUARE_CLOSE => Type::Op(<>),
    // @Type
    S_AT <ProtocolType> => Type::Op(vec![<>]),
    // JustType
    Item => Type::Data(<>),
    // %i16
    S_PERCENT <PrimitiveType> => Type::Primitive(<>),
    // !
    S_EXCLAMATION => Type::Never,
    // []%i32
    S_SQUARE_OPEN S_SQUARE_CLOSE <Type> => Type::Array(Box::new(<>)),
};

// var: Type
Capture: Capture<'input> = <name:IDENT> S_TWO_DOTS <r#type:Type> => Capture {<>};

// |fuzz: T, foo: Bar| -> Choco <T> !Error, AnotherError
#[inline]
GenericDef: GenericDef<'input> = <name:IDENT> <constraint:(S_TWO_DOTS <Type>)?> => GenericDef {<>};
GenericDefs: GenericDefs<'input> = <defs:OptDefault<(S_DIAMOND <Sep<GenericDef, S_COMMA>>)>> => GenericDefs {<>};
#[inline]
Errors: Vec<Item<'input>> = OptDefault<(S_EXCLAMATION <Comma<Item>>)>;
Signature: Signature<'input> = S_LINE <captures:Comma<Capture>> S_LINE <r#return:(S_ARROW <Type>)?> <generics:GenericDefs> <errors:Errors> => Signature {<>};

LiteralBool: bool = {
    KW_TRUE => true,
    KW_FALSE => false,
};
LiteralExpression: LiteralExpression<'input> = {
    // 123
    L_INTEGER => LiteralExpression::Integer(<>),
    // 123.12
    L_FLOAT => LiteralExpression::Float(<>),
    // 'c
    L_CHAR => LiteralExpression::Char(<>),
    // "str"
    L_STRING => LiteralExpression::String(<>),
    // true/false
    LiteralBool => LiteralExpression::Bool(<>),
    S_BRACKET_OPEN S_BRACKET_CLOSE => LiteralExpression::Void,
};

Label: &'input str = S_DOLLAR <IDENT>;

#[inline]
IfUnless: bool = { KW_IF => false, KW_UNLESS => true };
#[inline]
WhileUntil: bool = { KW_WHILE => false, KW_UNTIL => true };

BlockExpressionKind: BlockExpressionKind<'input> = {
    // { ... }
    <code:StatementBlock> => BlockExpressionKind::Simple {<>},
    // if true.eq(true) { ... } else { ... }
    <inverted:IfUnless> <check:Expression> <code:StatementBlock> <otherwise:(KW_ELSE <StatementBlock>)?> => BlockExpressionKind::Condition { check, code, otherwise, inverted},
    // sel val { of true { ... } ... or else { ... } }
    KW_SEL <of:Expression> S_CURLY_OPEN <cases:(KW_OF <Expression> <StatementBlock>)*> <fallback:(KW_OR KW_ELSE <StatementBlock>)?> S_CURLY_CLOSE => BlockExpressionKind::Selector {<>},
    // loop { ... }
    KW_LOOP <code:StatementBlock> => BlockExpressionKind::Loop {<>},
    // while cond { ... }
    <inverted:WhileUntil> <check:Expression> <code:StatementBlock> => BlockExpressionKind::While { check, code, inverted, do_first: false },
    // do { ... } while { ... }
    KW_DO <code:StatementBlock> <inverted:WhileUntil> <check:StatementBlock> => BlockExpressionKind::While { code, check: check.into(), inverted, do_first: true },
    // over [1, 2, 3] with var { ... }
    KW_OVER <what:Expression> KW_WITH <with:IDENT> <code:StatementBlock> => BlockExpressionKind::Over {<>},
    // handle func() { !Error with err { ... } ... else with err { ... } }
    KW_HANDLE <of:Expression> S_CURLY_OPEN <handlers:(S_EXCLAMATION <Item> KW_WITH <IDENT> <StatementBlock>)*> <fallback:(KW_ELSE KW_WITH <IDENT> <StatementBlock>)?> S_CURLY_CLOSE => BlockExpressionKind::Handle {<>},
    // unhandle { foobar() }
    KW_UNHANDLE <code:StatementBlock> => BlockExpressionKind::Unhandle {<>},
}
BlockExpression: BlockExpression<'input> = S_HASHTAG <label:Label?> <kind:BlockExpressionKind> =>
    BlockExpression {
        label, kind: Box::new(kind),
    };

#[inline]
Field: (&'input str, Expression<'input>) = <IDENT> S_TWO_DOTS <Expression>;
ConstructExpression: ConstructExpression<'input> = {
    // [a, b]
    S_SQUARE_OPEN <vals:Comma<Expression>> S_SQUARE_CLOSE => ConstructExpression::Array {<>},
    // Type (( a: b ))
    <what:Item> S_SQUARE_OPEN <fields:Comma<Field>> S_SQUARE_CLOSE => ConstructExpression::Data {<>},
};

ActionExpression: ActionExpression<'input> = {
    // bruh(foo, bar);
    <what:Expression> S_BRACKET_OPEN <args:Comma<Expression>> S_BRACKET_CLOSE => ActionExpression::Call {<>},
    // num.add(thing);
    <what:Expression> S_EXCLAMATION <method:IDENT> S_BRACKET_OPEN <args:Comma<Expression>> S_BRACKET_CLOSE => ActionExpression::MethodCall {<>},
    // something.field
    <of:Expression> S_DOT <field:IDENT> => ActionExpression::Access {<>},
    // var
    <item:Item> => ActionExpression::Load {<>},
};

pub Expression: Expression<'input> = {
    ActionExpression => Expression::Action(Box::new(<>)),
    BlockExpression => Expression::Block(<>),
    ConstructExpression => Expression::Construct(<>),
    LiteralExpression => Expression::Literal(<>),
}

Statement: Statement<'input> = {
    // call()
    <expr:Expression> => Statement::Eval {<>},
    // something = else
    <what:Expression> S_EQUAL <to:Expression> => Statement::Assignment {<>},
    // let var: Type = "abc";
    KW_LET <what:Capture> <with:(S_EQUAL <Expression>)?> => Statement::Declaration {<>},
    // break $outside some
    KW_ESCAPE <label:Label> <value:Expression?> => Statement::Escape {<>},
    // continue $outside
    KW_REPEAT <label:Label> => Statement::Repeat {<>},
    // return 42
    KW_RETURN <value:Expression?> => Statement::Return {<>},
    // throw SomeError
    KW_THROW <error:Expression> => Statement::Throw {<>},
    KW_VM_DEBUG <dcode:AsmU32> => Statement::VmDebug {<>},
};

InlineStatementBlock: StatementBlock<'input> = <code:Sep<Statement, S_DOT_COMMA>> <closed:S_DOT_COMMA?> =>
    StatementBlock {
        code, closed: closed.is_some()
    };

StatementBlock: StatementBlock<'input> = S_CURLY_OPEN <InlineStatementBlock> S_CURLY_CLOSE;

#[inline]
AsmU32: u32 = L_INTEGER => match <> {
    Integer::I64(n) => n.try_into().unwrap(),
    _ => panic!()
};

#[inline]
AsmId: AsmId = S_HASHTAG <space:AsmU32> S_TWO_DOTS <item:AsmU32> => AsmId {<>};

#[inline]
AsmPos: usize = L_INTEGER => match <> {
    Integer::I64(n) => n.try_into().unwrap(),
    _ => panic!()
};

AsmOp: AsmOp<'input> = {
    KW_PACK <r#type:Either<(AsmId AsmPos), Item>> => AsmOp::Pack {<>},
    KW_LOAD_ITEM <item:Either<AsmId, LiteralExpression>> => AsmOp::LoadConstItem {<>},
    KW_LOAD_FUNC <func:Either<AsmId, Item>> => AsmOp::LoadFunction {<>},
    KW_LOAD_IMPL <of:Either<(AsmId AsmU32), Item>> => AsmOp::LoadImplementation {<>},
    KW_LOAD_SYS_ITEM <id:Either<AsmId, IDENT>> => AsmOp::LoadSystemItem {<>},
    KW_ACCESS <id:Either<AsmU32, Item>> => AsmOp::Access {<>},
    KW_CALL <which:AsmPos> => AsmOp::Call {<>},
    KW_SYS_CALL <id:Either<AsmId, IDENT>> => AsmOp::SystemCall {<>},
    KW_RETURN => AsmOp::Return,
    KW_SWAP <with:AsmPos> => AsmOp::Swap {<>},
    KW_PULL <which:AsmPos> => AsmOp::Pull {<>},
    KW_POP <count:AsmPos> <offset:AsmPos> => AsmOp::Pop {<>},
    KW_COPY <count:AsmPos> <offset:AsmPos> => AsmOp::Copy {<>},
    KW_JUMP <to:Either<AsmPos, Label>> <check:LiteralBool?> => AsmOp::Jump {<>},
};
AsmInstruction: AsmInstruction<'input> = <label:Label?> <op:AsmOp> => AsmInstruction {<>};
AsmBlock: AsmBlock<'input> = KW_ASM S_CURLY_OPEN <instrs:AsmInstruction*> S_CURLY_CLOSE => AsmBlock {<>};

// |...| { ... }
Closure: Closure<'input> = <sig:Signature> <code:Either<StatementBlock, AsmBlock>> => Closure {<>};

Declaration: Declaration<'input> = {
    // include #core::entry::Entry
    KW_INCLUDE <item:Item> => Declaration::Include {<>},
//    // module name { ... }
//    "module" <name:IDENT> <r#mod:("{" <Module> "}")?> => Declaration::Module {<>},
    // const LENGTH: Int = 1
    KW_CONST <what:Capture> S_EQUAL <val:LiteralExpression> => Declaration::Const {<>},
    // data Foo (( bar: Int ))
    KW_DATA <name:IDENT> S_CURLY_OPEN <fields:Comma<(<IDENT> S_TWO_DOTS <Type>)>> S_CURLY_CLOSE => Declaration::Data {<>},
    // proto Add<O, R> { fnc add |...|; }
    // proto [Add + Sub + Mul + Div + Display] Real { ... }
    KW_PROTO <extends:OptDefault<(S_SQUARE_OPEN <SepReq<Item, S_PLUS>> S_SQUARE_CLOSE)>> <name:IDENT> <generics:GenericDefs> S_CURLY_OPEN <sigs:(KW_FNC <IDENT> <Signature> S_DOT_COMMA)*> S_CURLY_CLOSE => Declaration::Protocol {<>},
    // impl/Vector Add<Self, Self> { fnc add |...| { ... }; }
    KW_IMPL <r#for:(S_SLASH <Item>)?> S_SQUARE_OPEN <of:ProtocolType> S_SQUARE_CLOSE S_CURLY_OPEN <fncs:(KW_FNC <IDENT> <Closure> S_DOT_COMMA)*> S_CURLY_CLOSE => Declaration::Implementation {<>},
    // fnc/Vector [Zero] zero |...| { ... }
    KW_FNC <of:(S_SLASH <Item>)?> <r#impl:(S_SQUARE_OPEN <ProtocolType> S_SQUARE_CLOSE)?> <name:IDENT> <closure:Closure> => Declaration::Function {<>},
};

pub Module: Module<'input> = <decls:Declaration*> => Module {<>};
