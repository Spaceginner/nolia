fnc println |n: %str|
asm {
    syscall println
}

fnc add |a: %i64, b: %i64| -> %i64
asm {
    syscall add
}

fnc eq |a: %i64, b: %i64| -> %bool
asm {
    syscall equal
}


fnc not |b: %bool| -> %bool
asm {
    jump $invert true
    loadsysitem true_
    return
    $invert loadsysitem false_
}

fnc random_num || -> %i64 {
    4  // randomly selected by a dice roll
}

fnc entry || {
    let c: %i64 = 34;

    let mapped: %i64 = #sel c {
        of 4 {
            3  // not random
        }
        or else {
            random_num() // make it random
        }
    };

    #sel mapped {
        of 3 { println("it is 3") }
        of 4 {
            println("it is random");
            c = 343;
            #unless eq(c, 4) {
                println("now it isnt")
            };
        }
        or else { println("hh??/") }
    };
}
